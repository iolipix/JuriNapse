const mongoose = require('mongoose');
require('dotenv').config({ path: 'config/.env' });

const User = require('./backend/models/user.model');

const migrateSpecificUser = async (usernameOrEmail) => {
  try {
    console.log(`üéØ Migration premium pour utilisateur: ${usernameOrEmail}`);
    
    const uri = process.env.MONGODB_URI;
    if (!uri) {
      console.log('‚ö†Ô∏è  MONGODB_URI non trouv√©. Ex√©cutez sur Railway avec:');
      console.log(`   railway run node migrate-specific-user.js ${usernameOrEmail}`);
      return;
    }
    
    await mongoose.connect(uri);
    console.log('‚úÖ Connect√© √† MongoDB');

    // Trouver l'utilisateur
    const user = await User.findOne({
      $or: [
        { username: usernameOrEmail },
        { email: usernameOrEmail },
        { username: { $regex: new RegExp(usernameOrEmail, 'i') } }
      ]
    });

    if (!user) {
      console.log(`‚ùå Utilisateur "${usernameOrEmail}" non trouv√©`);
      return;
    }

    console.log(`\nüë§ Utilisateur trouv√©: ${user.username}`);
    console.log(`   üé≠ R√¥les: ${user.role}`);
    console.log(`   üìÖ Premium accord√©: ${user.premiumGrantedAt || 'null'}`);
    console.log(`   ‚è∞ Premium expire: ${user.premiumExpiresAt || 'jamais'}`);
    console.log(`   üë§ Accord√© par: ${user.premiumGrantedBy || 'null'}`);
    console.log(`   üìö Historique actuel: ${user.premiumHistory?.length || 0} entr√©es`);

    // V√©rifier s'il a des donn√©es premium √† migrer
    const hasPremiumData = user.premiumGrantedAt || user.premiumGrantedBy || user.premiumExpiresAt;
    
    if (!hasPremiumData) {
      console.log('‚ÑπÔ∏è  Aucune donn√©e premium √† migrer');
      return;
    }

    // V√©rifier s'il a d√©j√† un historique
    if (user.premiumHistory && user.premiumHistory.length > 0) {
      console.log('‚ÑπÔ∏è  L\'utilisateur a d√©j√† un historique premium');
      
      // Afficher l'historique
      user.premiumHistory.forEach((entry, index) => {
        console.log(`   ${index + 1}. Accord√©: ${entry.grantedAt}`);
        console.log(`      Expire: ${entry.expiresAt || 'jamais'}`);
        console.log(`      R√©voqu√©: ${entry.revokedAt || 'non'}`);
        console.log(`      Actif: ${entry.isActive}`);
      });
      return;
    }

    console.log('\nüîÑ Migration de l\'historique...');

    // Cr√©er une entr√©e d'historique bas√©e sur les donn√©es actuelles
    const historyEntry = {
      grantedBy: user.premiumGrantedBy || null,
      grantedAt: user.premiumGrantedAt || new Date('2024-01-01'),
      expiresAt: user.premiumExpiresAt || null,
      revokedAt: null,
      revokedBy: null,
      isActive: user.hasRole('premium')
    };

    // Si l'utilisateur n'a plus le r√¥le premium, marquer comme r√©voqu√©/expir√©
    if (!user.hasRole('premium')) {
      if (user.premiumExpiresAt && user.premiumExpiresAt <= new Date()) {
        // Expir√©
        historyEntry.revokedAt = user.premiumExpiresAt;
        console.log('üìÖ Premium expir√©, marqu√© dans l\'historique');
      } else {
        // R√©voqu√© manuellement
        historyEntry.revokedAt = new Date();
        console.log('üö´ Premium r√©voqu√©, marqu√© dans l\'historique');
      }
      historyEntry.isActive = false;
    }

    // Ajouter l'entr√©e √† l'historique
    user.premiumHistory = [historyEntry];
    
    await user.save();
    
    console.log('‚úÖ Migration termin√©e !');
    console.log(`   üìö Historique cr√©√© avec 1 entr√©e`);
    console.log(`   üéØ Statut: ${historyEntry.isActive ? 'Actif' : 'Inactif'}`);
    
    // V√©rifier le r√©sultat
    const premiumInfo = user.getPremiumInfo();
    console.log('\nüîç Informations premium apr√®s migration:');
    console.log(`   üëë A premium: ${premiumInfo.hasPremium}`);
    console.log(`   üìä Historique: ${premiumInfo.history?.length || 0} entr√©es`);

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    console.log('üîå D√©connexion de MongoDB');
    await mongoose.disconnect();
  }
};

// R√©cup√©rer l'argument de ligne de commande
const targetUser = process.argv[2] || 'test';
migrateSpecificUser(targetUser);