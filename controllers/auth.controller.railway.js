// Version ultra-minimaliste pour Railway sans AUCUN import d'EmailService
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/user.model');
const ProfilePicture = require('../models/profilePicture.model');
const TokenService = require('../services/token.service');

console.log('üöÄ RAILWAY AUTH CONTROLLER - Version minimaliste charg√©e');
console.log('üìÇ R√©pertoire:', __dirname);

// EmailService compl√®tement simul√© pour Railway
class SimulatedEmailService {
  constructor() {
    console.log('üìß EmailService simul√© initialis√© pour Railway');
  }
  
  async sendVerificationEmail(user, token) {
    console.log('üì® SIMULATION - Envoi email v√©rification pour:', user.email);
    console.log('üîë SIMULATION - Token g√©n√©r√©:', token.substring(0, 15) + '...');
    
    // Simuler un petit d√©lai
    await new Promise(resolve => setTimeout(resolve, 50));
    
    return {
      success: true,
      messageId: `sim-${Date.now()}`,
      provider: 'railway-simulation',
      note: 'Email simul√© - activation manuelle requise'
    };
  }
}

// Controller pour l'inscription
const register = async (req, res) => {
  try {
    console.log('üìù Tentative d\'inscription...');
    const { email, username, password, firstName, lastName, university, graduationYear, isStudent, bio } = req.body;

    // Validation des champs obligatoires
    if (!email || !username || !password || !firstName || !lastName) {
      console.log('‚ùå Champs manquants');
      return res.status(400).json({
        success: false,
        message: 'Tous les champs obligatoires doivent √™tre remplis'
      });
    }

    // Validation mot de passe (simplifi√©e)
    if (password.length < 8) {
      return res.status(400).json({
        success: false,
        message: 'Le mot de passe doit contenir au moins 8 caract√®res'
      });
    }

    console.log('üîç V√©rification utilisateur existant...');
    
    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await User.findOne({
      $or: [{ email }, { username }]
    });

    if (existingUser) {
      console.log('‚ö†Ô∏è Utilisateur d√©j√† existant');
      return res.status(400).json({
        success: false,
        message: 'Cet email ou ce nom d\'utilisateur est d√©j√† utilis√©'
      });
    }

    console.log('üîê Hash du mot de passe...');
    
    // Hash du mot de passe
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    console.log('üë§ Cr√©ation utilisateur...');
    
    // Cr√©er le nouvel utilisateur
    const newUser = new User({
      email,
      username,
      password: hashedPassword,
      firstName,
      lastName,
      university: university || '',
      graduationYear: graduationYear || new Date().getFullYear(),
      isStudent: isStudent !== undefined ? isStudent : true,
      bio: bio || '',
      isVerified: false // IMPORTANT : non v√©rifi√© par d√©faut
    });

    await newUser.save();
    console.log('‚úÖ Utilisateur cr√©√©:', newUser._id.toString());

    // Simulation d'envoi d'email
    try {
      console.log('üìß G√©n√©ration token...');
      const verificationToken = await TokenService.generateVerificationToken(newUser._id, 'email_verification');
      
      console.log('üì® Simulation envoi email...');
      const emailService = new SimulatedEmailService();
      const emailResult = await emailService.sendVerificationEmail(newUser, verificationToken);
      
      console.log('‚úÖ Email simul√©:', emailResult);
      
    } catch (emailError) {
      console.error('‚ö†Ô∏è Erreur simulation email:', emailError);
    }

    console.log('üì§ R√©ponse inscription...');

    // R√©ponse sans JWT (compte non v√©rifi√©)
    res.status(201).json({
      success: true,
      message: 'Compte cr√©√© avec succ√®s ! V√©rification email simul√©e sur Railway.',
      user: {
        id: newUser._id,
        email: newUser.email,
        username: newUser.username,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        university: newUser.university,
        graduationYear: newUser.graduationYear,
        isStudent: newUser.isStudent,
        bio: newUser.bio,
        profilePicture: null,
        joinedAt: newUser.createdAt,
        isVerified: false
      },
      requiresVerification: true,
      needsVerification: true,
      railwayNote: 'Email simulation active - v√©rification manuelle possible'
    });

  } catch (error) {
    console.error('‚ùå ERREUR INSCRIPTION:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de l\'inscription',
      railwayError: error.message
    });
  }
};

// Controller pour la connexion avec BLOCAGE des non-v√©rifi√©s
const login = async (req, res) => {
  try {
    console.log('üîê Tentative de connexion...');
    
    const { emailOrPseudo, emailOrUsername, password, motDePasse } = req.body;
    const emailOrUserField = emailOrPseudo || emailOrUsername;
    const passwordField = motDePasse || password;

    if (!emailOrUserField || !passwordField) {
      return res.status(400).json({
        success: false,
        message: 'Email/pseudo et mot de passe sont obligatoires'
      });
    }

    console.log('üîç Recherche utilisateur:', emailOrUserField);
    
    const user = await User.findOne({
      $or: [
        { email: emailOrUserField },
        { username: emailOrUserField }
      ]
    });

    if (!user) {
      console.log('‚ùå Utilisateur introuvable');
      return res.status(400).json({
        success: false,
        message: 'Email/pseudo ou mot de passe incorrect'
      });
    }

    console.log('üë§ Utilisateur trouv√©:', user.username);
    console.log('‚úÖ Statut v√©rifi√©:', user.isVerified);

    const isPasswordValid = await bcrypt.compare(passwordField, user.password);
    
    if (!isPasswordValid) {
      console.log('‚ùå Mot de passe invalide');
      return res.status(400).json({
        success: false,
        message: 'Email/pseudo ou mot de passe incorrect'
      });
    }

    // ‚ö†Ô∏è V√âRIFICATION CRITIQUE - BLOQUER LES NON V√âRIFI√âS
    if (!user.isVerified) {
      console.log('üö´ CONNEXION BLOQU√âE - Compte non v√©rifi√©:', user.email);
      return res.status(403).json({
        success: false,
        message: 'Votre compte n\'est pas encore v√©rifi√©. Sur Railway, la v√©rification est simul√©e.',
        requiresVerification: true,
        needsVerification: true,
        email: user.email,
        railwayNote: 'V√©rification email requise - simulation active'
      });
    }

    console.log('‚úÖ CONNEXION AUTORIS√âE:', user.username);

    // G√©n√©ration JWT pour utilisateur v√©rifi√©
    const token = jwt.sign(
      { userId: user._id },
      process.env.JWT_SECRET || 'jurinapse_secret_key',
      { expiresIn: '7d' }
    );

    res.cookie('jurinapse_token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 7 * 24 * 60 * 60 * 1000
    });

    // R√©cup√©ration photo de profil
    const profilePicture = await ProfilePicture.findOne({ userId: user._id });

    console.log('üéâ Connexion r√©ussie');

    res.json({
      success: true,
      message: 'Connexion r√©ussie',
      token: token,
      user: {
        id: user._id,
        email: user.email,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
        university: user.university,
        graduationYear: user.graduationYear,
        isStudent: user.isStudent,
        bio: user.bio,
        profilePicture: profilePicture ? profilePicture.imageData : null,
        joinedAt: user.createdAt,
        isVerified: true
      }
    });

  } catch (error) {
    console.error('‚ùå ERREUR CONNEXION:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la connexion'
    });
  }
};

// Fonctions basiques pour √©viter les erreurs
const logout = (req, res) => {
  console.log('üëã D√©connexion');
  res.clearCookie('jurinapse_token');
  res.json({ success: true, message: 'D√©connexion r√©ussie' });
};

const getProfile = (req, res) => {
  res.json({ 
    success: true, 
    user: req.user || {},
    railwayNote: 'Profil basique' 
  });
};

const updateProfile = (req, res) => {
  res.json({ 
    success: true, 
    message: 'Mise √† jour profil (placeholder Railway)',
    railwayNote: 'Fonctionnalit√© en cours de d√©veloppement'
  });
};

const uploadProfilePicture = (req, res) => {
  res.json({ 
    success: true, 
    message: 'Upload photo (placeholder Railway)',
    railwayNote: 'Fonctionnalit√© en cours de d√©veloppement'
  });
};

const getProfilePicture = (req, res) => {
  res.json({ 
    success: true, 
    message: 'Photo r√©cup√©r√©e (placeholder Railway)',
    railwayNote: 'Fonctionnalit√© en cours de d√©veloppement'
  });
};

const deleteProfilePicture = (req, res) => {
  res.json({ 
    success: true, 
    message: 'Photo supprim√©e (placeholder Railway)',
    railwayNote: 'Fonctionnalit√© en cours de d√©veloppement'
  });
};

const checkUsernameAvailability = async (req, res) => {
  try {
    const { username } = req.params;
    const existingUser = await User.findOne({ username });
    res.json({ 
      success: true, 
      available: !existingUser,
      railwayNote: 'V√©rification pseudo'
    });
  } catch (error) {
    res.json({ success: true, available: true });
  }
};

const changePassword = (req, res) => {
  res.json({ 
    success: true, 
    message: 'Changement mot de passe (placeholder Railway)',
    railwayNote: 'Fonctionnalit√© en cours de d√©veloppement'
  });
};

console.log('‚úÖ RAILWAY AUTH CONTROLLER - Toutes les fonctions d√©finies');

module.exports = {
  register,
  login,
  logout,
  getProfile,
  updateProfile,
  uploadProfilePicture,
  getProfilePicture,
  deleteProfilePicture,
  checkUsernameAvailability,
  changePassword
};
