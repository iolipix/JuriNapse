const User = require('../models/user.model');
const TokenService = require('../services/token.service');
const EmailService = require('../services/email.service');

class VerificationController {
  /**
   * Envoyer un email de v√©rification
   */
  async sendVerificationEmail(req, res) {
    try {
      const { email } = req.body;

      if (!email) {
        return res.status(400).json({
          success: false,
          message: 'Email requis'
        });
      }

      // Chercher l'utilisateur
      const user = await User.findOne({ email }).select('+email');
      
      if (!user) {
        // Pour la s√©curit√©, on ne r√©v√®le pas si l'email existe
        return res.status(200).json({
          success: true,
          message: 'Si cet email existe dans notre syst√®me, un lien de v√©rification a √©t√© envoy√©.'
        });
      }

      // Si d√©j√† v√©rifi√©
      if (user.isVerified) {
        return res.status(400).json({
          success: false,
          message: 'Ce compte est d√©j√† v√©rifi√©'
        });
      }

      // G√©n√©rer le token de v√©rification
      const token = await TokenService.generateVerificationToken(user._id, 'email_verification');

      // Envoyer l'email
      await EmailService.sendVerificationEmail(user, token);

      console.log(`üìß Email de v√©rification envoy√© √† ${user.email}`);

      res.status(200).json({
        success: true,
        message: 'Email de v√©rification envoy√© avec succ√®s',
        data: {
          email: user.email,
          expiresIn: '1 heure'
        }
      });

    } catch (error) {
      console.error('‚ùå Erreur envoi email v√©rification:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur lors de l\'envoi de l\'email de v√©rification',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  /**
   * V√©rifier un compte via le token
   */
  async verifyEmail(req, res) {
    try {
      const { token } = req.query;

      if (!token) {
        return res.status(400).json({
          success: false,
          message: 'Token de v√©rification manquant'
        });
      }

      console.log(`üîç Tentative de v√©rification avec token: ${token.substring(0, 10)}...`);

      // V√©rifier et consommer le token
      const tokenData = await TokenService.verifyAndConsumeToken(token, 'email_verification');
      
      if (!tokenData.userId) {
        throw new Error('Utilisateur non trouv√©');
      }

      const user = tokenData.userId;

      // V√©rifier si d√©j√† v√©rifi√©
      if (user.isVerified) {
        return res.redirect(`${process.env.FRONTEND_URL}/auth/login?status=already-verified&message=Votre compte est d√©j√† v√©rifi√©`);
      }

      // Activer le compte
      await User.findByIdAndUpdate(user._id, {
        isVerified: true,
        verifiedAt: new Date()
      });

      console.log(`‚úÖ Compte v√©rifi√© pour l'utilisateur: ${user.email}`);

      // Envoyer l'email de bienvenue (optionnel, en arri√®re-plan)
      try {
        await EmailService.sendWelcomeEmail(user);
      } catch (emailError) {
        console.error('‚ö†Ô∏è Erreur envoi email bienvenue:', emailError);
        // On ne bloque pas le processus de v√©rification pour √ßa
      }

      // Rediriger vers le frontend avec succ√®s
      const redirectUrl = `${process.env.FRONTEND_URL}/auth/login?status=verified&message=Votre compte a √©t√© v√©rifi√© avec succ√®s ! Vous pouvez maintenant vous connecter.`;
      
      res.redirect(redirectUrl);

    } catch (error) {
      console.error('‚ùå Erreur v√©rification email:', error);
      
      let errorMessage = 'Erreur lors de la v√©rification';
      let statusCode = 400;

      if (error.message.includes('invalide')) {
        errorMessage = 'Lien de v√©rification invalide';
        statusCode = 400;
      } else if (error.message.includes('expir√©')) {
        errorMessage = 'Lien de v√©rification expir√©';
        statusCode = 410;
      } else {
        errorMessage = 'Erreur technique lors de la v√©rification';
        statusCode = 500;
      }

      // Rediriger vers le frontend avec l'erreur
      const redirectUrl = `${process.env.FRONTEND_URL}/auth/register?status=error&message=${encodeURIComponent(errorMessage)}`;
      res.redirect(redirectUrl);
    }
  }

  /**
   * Renvoyer un email de v√©rification
   */
  async resendVerificationEmail(req, res) {
    try {
      const { email } = req.body;

      if (!email) {
        return res.status(400).json({
          success: false,
          message: 'Email requis'
        });
      }

      const user = await User.findOne({ email });

      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Aucun compte trouv√© avec cet email'
        });
      }

      if (user.isVerified) {
        return res.status(400).json({
          success: false,
          message: 'Ce compte est d√©j√† v√©rifi√©'
        });
      }

      // G√©n√©rer un nouveau token
      const token = await TokenService.generateVerificationToken(user._id, 'email_verification');

      // Envoyer l'email
      await EmailService.sendVerificationEmail(user, token);

      console.log(`üìß Email de v√©rification renvoy√© √† ${user.email}`);

      res.status(200).json({
        success: true,
        message: 'Email de v√©rification renvoy√© avec succ√®s',
        data: {
          email: user.email,
          expiresIn: '1 heure'
        }
      });

    } catch (error) {
      console.error('‚ùå Erreur renvoi email v√©rification:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur lors du renvoi de l\'email',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  /**
   * V√©rifier le statut de v√©rification d'un utilisateur
   */
  async checkVerificationStatus(req, res) {
    try {
      const { email } = req.query;

      if (!email) {
        return res.status(400).json({
          success: false,
          message: 'Email requis'
        });
      }

      const user = await User.findOne({ email }).select('isVerified email verifiedAt');

      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Utilisateur non trouv√©'
        });
      }

      res.status(200).json({
        success: true,
        data: {
          email: user.email,
          isVerified: user.isVerified,
          verifiedAt: user.verifiedAt || null
        }
      });

    } catch (error) {
      console.error('‚ùå Erreur v√©rification statut:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur lors de la v√©rification du statut'
      });
    }
  }

  /**
   * Statistiques des tokens (admin uniquement)
   */
  async getTokenStats(req, res) {
    try {
      // TODO: Ajouter une v√©rification admin ici
      
      const stats = await TokenService.getTokenStats();
      
      res.status(200).json({
        success: true,
        data: stats
      });

    } catch (error) {
      console.error('‚ùå Erreur stats tokens:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur lors de la r√©cup√©ration des statistiques'
      });
    }
  }
}

module.exports = new VerificationController();
