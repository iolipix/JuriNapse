const axios = require('axios');

async function debugPostIssue() {
    try {
        console.log('üîç Debug approfondi du probl√®me de suppression...');
        
        const baseURL = 'https://jurinapse-production.up.railway.app/api';
        
        // 1. R√©cup√©rer la liste des posts
        console.log('üìä √âtape 1: R√©cup√©ration liste posts...');
        const postsResponse = await axios.get(`${baseURL}/posts`);
        
        if (postsResponse.data.success) {
            console.log(`‚úÖ ${postsResponse.data.posts.length} posts trouv√©s dans la r√©ponse API`);
            
            // V√©rifier chaque post individuellement
            console.log('\nüîç √âtape 2: V√©rification individuelle de chaque post...');
            
            for (let i = 0; i < Math.min(postsResponse.data.posts.length, 5); i++) {
                const post = postsResponse.data.posts[i];
                console.log(`\nüìÑ Post ${i + 1}: ${post.title}`);
                console.log(`   ID: ${post._id}`);
                console.log(`   Auteur: ${post.authorId?.username || 'Inconnu'}`);
                
                // V√©rifier son existence r√©elle en base
                try {
                    const checkResponse = await axios.get(`${baseURL}/diagnostic/check-post/${post._id}`);
                    console.log(`   ‚úÖ Existe en base: ${checkResponse.data.exists}`);
                    
                    if (!checkResponse.data.exists) {
                        console.log('   ‚ùå PROBL√àME D√âTECT√â: Post affich√© mais n\'existe pas en base !');
                        console.log('   üîß Cela explique les erreurs 404 lors de la suppression');
                    }
                } catch (checkError) {
                    console.log(`   ‚ùå Erreur v√©rification: ${checkError.message}`);
                }
            }
        }
        
        // 2. V√©rifier s'il y a un probl√®me de cache
        console.log('\nüóÑÔ∏è √âtape 3: Test de contournement du cache...');
        
        // Ajouter un param√®tre random pour contourner le cache
        const noCacheResponse = await axios.get(`${baseURL}/posts?_t=${Date.now()}`);
        
        console.log(`üìä R√©ponse sans cache: ${noCacheResponse.data.posts.length} posts`);
        
        // 3. Comparer les r√©ponses
        if (postsResponse.data.posts.length !== noCacheResponse.data.posts.length) {
            console.log('‚ö†Ô∏è DIFF√âRENCE D√âTECT√âE entre les r√©ponses avec/sans cache !');
            console.log('üîß Cela confirme un probl√®me de cache c√¥t√© serveur');
        } else {
            console.log('‚úÖ Pas de diff√©rence - le cache n\'est pas la cause');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur debug:', error.response?.data || error.message);
    }
}

// Test sp√©cifique pour voir les headers de cache
async function testCacheHeaders() {
    try {
        console.log('üóÑÔ∏è Test des headers de cache...');
        
        const response = await axios.get('https://jurinapse-production.up.railway.app/api/posts', {
            validateStatus: () => true // Accepter toutes les r√©ponses
        });
        
        console.log('üìã Headers de r√©ponse:');
        console.log('   Cache-Control:', response.headers['cache-control'] || 'Non d√©fini');
        console.log('   ETag:', response.headers['etag'] || 'Non d√©fini');
        console.log('   Last-Modified:', response.headers['last-modified'] || 'Non d√©fini');
        
    } catch (error) {
        console.error('‚ùå Erreur test headers:', error.message);
    }
}

// Ex√©cuter le debug
console.log('üöÄ D√©but du debug approfondi...\n');

debugPostIssue().then(() => {
    console.log('\nüóÑÔ∏è Test des headers de cache...');
    return testCacheHeaders();
}).then(() => {
    console.log('\nüí° SOLUTION RECOMMAND√âE:');
    console.log('Si des posts sont affich√©s mais n\'existent pas en base,');
    console.log('le probl√®me vient probablement du cache serveur NodeCache.');
    console.log('Il faut vider le cache ou d√©sactiver temporairement le cache.');
});
