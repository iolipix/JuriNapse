// Cr√©er le groupe priv√© manquant avec l'ID sp√©cifique
const mongoose = require('mongoose');
const Group = require('./models/group.model');
const User = require('./models/user.model');

async function createMissingPrivateGroup() {
  try {
    await mongoose.connect('mongodb://localhost:27017/lexilis');
    console.log('Connect√© √† MongoDB');

    const theo = await User.findOne({ username: 'theophane_mry' });
    if (!theo) {
      console.log('‚ùå Th√©ophane non trouv√©');
      return;
    }

    // Cr√©er un deuxi√®me utilisateur pour la conversation (Thomas)
    let thomas = await User.findOne({ username: 'thomas_test' });
    if (!thomas) {
      thomas = new User({
        username: 'thomas_test',
        firstName: 'Thomas',
        lastName: 'Dupont',
        email: 'thomas@test.com',
        password: 'hashedpassword' // En production, hasher correctement
      });
      await thomas.save();
      console.log('üë§ Thomas cr√©√©:', thomas._id.toString());
    }

    // Cr√©er le groupe avec l'ID sp√©cifique que vous utilisez
    const targetId = new mongoose.Types.ObjectId('68b3839897500925dc9234a6');
    
    // V√©rifier si le groupe existe d√©j√†
    let group = await Group.findById(targetId);
    if (group) {
      console.log('‚úÖ Le groupe existe d√©j√†');
      return;
    }

    // Cr√©er le nouveau groupe
    group = new Group({
      _id: targetId,
      name: 'Chat priv√©',
      description: 'Conversation priv√©e',
      isPrivate: true,
      adminId: theo._id,
      members: [theo._id, thomas._id],
      moderatorIds: []
    });

    await group.save();
    console.log('‚úÖ Groupe priv√© cr√©√© avec succ√®s!');
    console.log('ID:', group._id.toString());
    console.log('Nom:', group.name);
    console.log('Priv√©:', group.isPrivate);
    console.log('Membres:', group.members.length);
    
    console.log('üü¢ Maintenant vous pouvez tester la suppression d\'historique!');

  } catch (error) {
    if (error.code === 11000) {
      console.log('‚ÑπÔ∏è Le groupe existe d√©j√† avec cet ID');
    } else {
      console.error('Erreur:', error);
    }
  } finally {
    await mongoose.disconnect();
  }
}

createMissingPrivateGroup();
