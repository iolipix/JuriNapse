const mongoose = require('mongoose');
require('dotenv').config({ path: './backend/.env' });

// Ajouter le chemin des models
const path = require('path');
const modelsPath = path.join(__dirname, 'backend', 'models');

async function diagnosticCompletGroupeMessages() {
  try {
    console.log('üîå Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    const Message = require(path.join(modelsPath, 'message.model'));
    const Group = require(path.join(modelsPath, 'group.model'));
    const User = require(path.join(modelsPath, 'user.model'));
    
    const groupId = '6877ada30f934e0b470cf524';
    const userId = '6874ea7cc98b0aa967e09f4d'; // theophane
    
    console.log('\nüîç DIAGNOSTIC COMPLET GROUPE DROIT L3');
    console.log('====================================');

    // 1. V√©rifier le groupe
    console.log('\n1Ô∏è‚É£ V√âRIFICATION DU GROUPE');
    const group = await Group.findById(groupId);
    if (!group) {
      console.log('‚ùå Groupe non trouv√©');
      return;
    }
    
    console.log(`‚úÖ Groupe: ${group.name}`);
    console.log(`üìä Membres: ${group.members.length}`);
    console.log(`üë§ Th√©ophane est membre: ${group.members.includes(userId) ? 'OUI' : 'NON'}`);
    
    // V√©rifier les param√®tres de masquage et suppression d'historique
    const hiddenEntry = group.hiddenForWithTimestamp?.find(h => h.userId.toString() === userId.toString());
    const historyDeletedEntry = group.historyDeletedFor?.find(h => h.userId.toString() === userId.toString());
    
    console.log(`üôà Conversation masqu√©e: ${hiddenEntry ? 'OUI (' + hiddenEntry.hiddenAt + ')' : 'NON'}`);
    console.log(`üóëÔ∏è Historique supprim√©: ${historyDeletedEntry ? 'OUI (' + historyDeletedEntry.deletedAt + ')' : 'NON'}`);

    // 2. Compter tous les messages
    console.log('\n2Ô∏è‚É£ COMPTAGE DES MESSAGES');
    const totalMessages = await Message.countDocuments({ groupId });
    console.log(`üìä Total messages dans le groupe: ${totalMessages}`);
    
    // 3. Compter les messages visibles pour l'utilisateur
    let visibleQuery = { groupId };
    if (hiddenEntry) {
      visibleQuery.createdAt = { $gt: hiddenEntry.hiddenAt };
    } else if (historyDeletedEntry) {
      visibleQuery.createdAt = { $gt: historyDeletedEntry.deletedAt };
    }
    
    const visibleMessages = await Message.countDocuments(visibleQuery);
    console.log(`üëÅÔ∏è Messages visibles pour Th√©ophane: ${visibleMessages}`);
    console.log(`üîç Query utilis√©e: ${JSON.stringify(visibleQuery)}`);

    // 4. V√©rifier les derniers messages
    console.log('\n3Ô∏è‚É£ DERNIERS MESSAGES (sans filtre utilisateur)');
    const recentMessages = await Message.find({ groupId })
      .sort({ createdAt: -1 })
      .limit(5)
      .populate('authorId', 'username firstName lastName');
    
    console.log(`üìä Messages r√©cents: ${recentMessages.length}`);
    recentMessages.forEach((msg, index) => {
      const authorName = msg.authorId ? 
        (msg.authorId.username || `${msg.authorId.firstName} ${msg.authorId.lastName}`) : 
        'Auteur manquant';
      console.log(`${index + 1}. ${new Date(msg.createdAt).toLocaleString()} - ${authorName}: ${msg.content.substring(0, 50)}...`);
    });

    // 5. V√©rifier les messages visibles pour l'utilisateur
    console.log('\n4Ô∏è‚É£ MESSAGES VISIBLES POUR TH√âOPHANE');
    const userVisibleMessages = await Message.find(visibleQuery)
      .sort({ createdAt: -1 })
      .limit(5)
      .populate('authorId', 'username firstName lastName');
    
    console.log(`üìä Messages visibles: ${userVisibleMessages.length}`);
    if (userVisibleMessages.length === 0) {
      console.log('‚ùå PROBL√àME: Aucun message visible pour l\'utilisateur');
      
      if (hiddenEntry) {
        console.log(`üîç Raison: Conversation masqu√©e depuis ${hiddenEntry.hiddenAt}`);
        console.log('üí° Solution: D√©masquer la conversation ou ajouter un nouveau message');
      } else if (historyDeletedEntry) {
        console.log(`üîç Raison: Historique supprim√© depuis ${historyDeletedEntry.deletedAt}`);
        console.log('üí° Solution: R√©initialiser la suppression d\'historique ou ajouter un nouveau message');
      }
    } else {
      userVisibleMessages.forEach((msg, index) => {
        const authorName = msg.authorId ? 
          (msg.authorId.username || `${msg.authorId.firstName} ${msg.authorId.lastName}`) : 
          'Auteur manquant';
        console.log(`${index + 1}. ${new Date(msg.createdAt).toLocaleString()} - ${authorName}: ${msg.content.substring(0, 50)}...`);
      });
    }

    // 6. V√©rifier l'utilisateur syst√®me supprim√©
    console.log('\n5Ô∏è‚É£ UTILISATEUR SYST√àME SUPPRIM√â');
    const deletedUser = await User.findOne({ username: 'utilisateur_supprime' });
    if (deletedUser) {
      console.log(`‚úÖ Utilisateur syst√®me trouv√©: ${deletedUser._id}`);
      const messagesFromDeletedUser = await Message.countDocuments({ 
        groupId, 
        authorId: deletedUser._id 
      });
      console.log(`üìä Messages de l'utilisateur supprim√©: ${messagesFromDeletedUser}`);
    } else {
      console.log('‚ùå Utilisateur syst√®me manquant');
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüìù Connexion MongoDB ferm√©e');
  }
}

diagnosticCompletGroupeMessages();
