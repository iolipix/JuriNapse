const mongoose = require('mongoose');
const Message = require('./backend/models/message.model');
const User = require('./backend/models/user.model');
const Group = require('./backend/models/group.model');
require('dotenv').config({ path: './config/.env' });

// ID sp√©cial pour "Utilisateur Introuvable"
const UTILISATEUR_INTROUVABLE_ID = new mongoose.Types.ObjectId('000000000000000000000001');

async function creerUtilisateurIntrouvable() {
    try {
        // V√©rifier si l'utilisateur "Introuvable" existe d√©j√†
        let utilisateurIntrouvable = await User.findById(UTILISATEUR_INTROUVABLE_ID);
        
        if (!utilisateurIntrouvable) {
            // Cr√©er l'utilisateur "Introuvable"
            utilisateurIntrouvable = new User({
                _id: UTILISATEUR_INTROUVABLE_ID,
                username: 'Utilisateur Introuvable',
                email: 'introuvable@deleted.com',
                password: 'DELETED_ACCOUNT',
                isDeleted: true,
                createdAt: new Date('2020-01-01')
            });
            
            await utilisateurIntrouvable.save();
            console.log('‚úÖ Utilisateur "Introuvable" cr√©√©');
        } else {
            console.log('‚úÖ Utilisateur "Introuvable" existe d√©j√†');
        }
        
        return utilisateurIntrouvable;
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation utilisateur introuvable:', error);
        throw error;
    }
}

async function trouverUtilisateursSupprimes() {
    try {
        console.log('üîç Recherche des utilisateurs r√©f√©renc√©s mais n\'existant plus...');
        
        // R√©cup√©rer tous les IDs d'utilisateurs existants
        const utilisateursExistants = await User.find({}, '_id');
        const idsExistants = new Set(utilisateursExistants.map(u => u._id.toString()));
        
        // Chercher dans les messages
        const messagesOrphelins = await Message.find({}).select('authorId');
        const idsReferencesMessages = new Set();
        
        messagesOrphelins.forEach(msg => {
            if (msg.authorId && !idsExistants.has(msg.authorId.toString())) {
                idsReferencesMessages.add(msg.authorId.toString());
            }
        });
        
        const tousIdsOrphelins = new Set([...idsReferencesMessages]);
        
        console.log(`üìä R√©f√©rences orphelines trouv√©es:`);
        console.log(`   - Messages: ${idsReferencesMessages.size} IDs orphelins`);
        console.log(`   - Total unique: ${tousIdsOrphelins.size} IDs √† migrer`);
        
        return Array.from(tousIdsOrphelins);
        
    } catch (error) {
        console.error('‚ùå Erreur recherche utilisateurs supprim√©s:', error);
        throw error;
    }
}

async function migrerReferencesOrphelines(idsOrphelins) {
    try {
        console.log('üîÑ Migration des r√©f√©rences orphelines...');
        
        let totalMigrations = 0;
        
        // Migrer les messages normaux
        for (const idOrphelin of idsOrphelins) {
            const resultMessages = await Message.updateMany(
                { authorId: idOrphelin },
                { authorId: UTILISATEUR_INTROUVABLE_ID }
            );
            
            if (resultMessages.modifiedCount > 0) {
                console.log(`   ‚úÖ Messages: ${resultMessages.modifiedCount} mis √† jour pour ${idOrphelin}`);
                totalMigrations += resultMessages.modifiedCount;
            }
        }
        
        console.log(`üéâ Migration termin√©e: ${totalMigrations} r√©f√©rences mises √† jour`);
        return totalMigrations;
        
    } catch (error) {
        console.error('‚ùå Erreur migration:', error);
        throw error;
    }
}

async function verifierMigration() {
    try {
        console.log('üîç V√©rification de la migration...');
        
        // Compter les messages avec l'utilisateur "Introuvable"
        const messagesIntrouvables = await Message.countDocuments({ 
            authorId: UTILISATEUR_INTROUVABLE_ID 
        });
        
        console.log(`üìä Apr√®s migration:`);
        console.log(`   - Messages avec "Utilisateur Introuvable": ${messagesIntrouvables}`);
        
        // V√©rifier s'il reste des r√©f√©rences orphelines
        const utilisateursExistants = await User.find({}, '_id');
        const idsExistants = new Set(utilisateursExistants.map(u => u._id.toString()));
        
        const messagesOrphelinsRestants = await Message.find({}).select('authorId');
        let orphelinsRestants = 0;
        
        messagesOrphelinsRestants.forEach(msg => {
            if (msg.authorId && !idsExistants.has(msg.authorId.toString())) {
                orphelinsRestants++;
            }
        });
        
        if (orphelinsRestants === 0) {
            console.log('‚úÖ Aucune r√©f√©rence orpheline restante !');
        } else {
            console.log(`‚ö†Ô∏è  ${orphelinsRestants} r√©f√©rences orphelines restantes`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur v√©rification:', error);
        throw error;
    }
}

async function executerMigration() {
    try {
        console.log('üöÄ D√©marrage de la migration des utilisateurs supprim√©s');
        console.log('=' .repeat(60));
        
        // Connexion MongoDB
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ Connexion MongoDB √©tablie');
        
        // 1. Cr√©er l'utilisateur "Introuvable"
        await creerUtilisateurIntrouvable();
        
        // 2. Trouver les r√©f√©rences orphelines
        const idsOrphelins = await trouverUtilisateursSupprimes();
        
        if (idsOrphelins.length === 0) {
            console.log('üéâ Aucune r√©f√©rence orpheline trouv√©e !');
            return;
        }
        
        // 3. Migrer les r√©f√©rences
        const totalMigrations = await migrerReferencesOrphelines(idsOrphelins);
        
        // 4. V√©rifier la migration
        await verifierMigration();
        
        console.log('=' .repeat(60));
        console.log('üéâ Migration termin√©e avec succ√®s !');
        
    } catch (error) {
        console.error('‚ùå Erreur critique:', error);
    } finally {
        await mongoose.connection.close();
        console.log('üëã Connexion ferm√©e');
    }
}

// Ex√©cuter la migration
if (require.main === module) {
    executerMigration();
}

module.exports = { executerMigration, UTILISATEUR_INTROUVABLE_ID };
