const mongoose = require('mongoose');
const User = require('../models/user.model');

// ID de l'utilisateur "Introuvable"
const UTILISATEUR_INTROUVABLE_ID = new mongoose.Types.ObjectId('000000000000000000000001');

// Cache des utilisateurs v√©rifi√©s (pour √©viter les requ√™tes r√©p√©t√©es)
const utilisateursVerifies = new Set();
const utilisateursInexistants = new Set();

// Nettoyer le cache toutes les 5 minutes
setInterval(() => {
    utilisateursVerifies.clear();
    utilisateursInexistants.clear();
}, 5 * 60 * 1000);

async function verifierEtCorrigerUtilisateur(authorId) {
    try {
        // Si pas d'ID, retourner l'utilisateur introuvable
        if (!authorId) {
            return UTILISATEUR_INTROUVABLE_ID;
        }

        const authorIdStr = authorId.toString();
        
        // Si d√©j√† v√©rifi√© comme existant
        if (utilisateursVerifies.has(authorIdStr)) {
            return authorId;
        }
        
        // Si d√©j√† identifi√© comme inexistant
        if (utilisateursInexistants.has(authorIdStr)) {
            return UTILISATEUR_INTROUVABLE_ID;
        }
        
        // V√©rifier si l'utilisateur existe
        const utilisateurExiste = await User.findById(authorId).select('_id');
        
        if (utilisateurExiste) {
            utilisateursVerifies.add(authorIdStr);
            return authorId;
        } else {
            utilisateursInexistants.add(authorIdStr);
            console.log(`üîÑ R√©f√©rence orpheline d√©tect√©e et corrig√©e: ${authorIdStr}`);
            return UTILISATEUR_INTROUVABLE_ID;
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Erreur v√©rification utilisateur:', error);
        // En cas d'erreur, utiliser l'utilisateur introuvable
        return UTILISATEUR_INTROUVABLE_ID;
    }
}

async function creerUtilisateurIntrouvableAuto() {
    try {
        const User = require('../models/user.model');
        
        // V√©rifier si l'utilisateur "Introuvable" existe
        let utilisateurIntrouvable = await User.findById(UTILISATEUR_INTROUVABLE_ID);
        
        if (!utilisateurIntrouvable) {
            utilisateurIntrouvable = new User({
                _id: UTILISATEUR_INTROUVABLE_ID,
                username: 'Utilisateur Introuvable',
                email: 'introuvable@deleted.com',
                password: 'DELETED_ACCOUNT',
                isDeleted: true,
                createdAt: new Date('2020-01-01')
            });
            
            await utilisateurIntrouvable.save();
            console.log('‚úÖ Utilisateur "Introuvable" cr√©√© automatiquement');
        }
        
        return utilisateurIntrouvable;
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation auto utilisateur introuvable:', error);
    }
}

// Middleware pour les messages
async function middlewareMessagesOrphelins(req, res, next) {
    try {
        // S'assurer que l'utilisateur "Introuvable" existe
        await creerUtilisateurIntrouvableAuto();
        
        // Continuer vers le contr√¥leur
        next();
    } catch (error) {
        console.error('‚ùå Erreur middleware orphelins:', error);
        next();
    }
}

// Fonction pour enrichir les messages avec correction automatique
async function enrichirMessagesAvecCorrection(messages) {
    if (!Array.isArray(messages)) {
        return messages;
    }
    
    const messagesCorrig√©s = [];
    
    for (const message of messages) {
        try {
            // Cr√©er une copie du message
            const messageCorrig√© = { ...message.toObject() };
            
            // V√©rifier et corriger l'authorId
            if (messageCorrig√©.authorId) {
                const authorIdCorrig√© = await verifierEtCorrigerUtilisateur(messageCorrig√©.authorId);
                
                // Si l'ID a √©t√© corrig√©, mettre √† jour en base
                if (authorIdCorrig√©.toString() !== messageCorrig√©.authorId.toString()) {
                    // Mise √† jour asynchrone en base (sans attendre)
                    const Message = require('../models/message.model');
                    
                    // Essayer de mettre √† jour dans la collection Message
                    Message.updateOne(
                        { _id: message._id },
                        { authorId: authorIdCorrig√© }
                    ).catch(err => console.warn('Mise √† jour Message √©chou√©e:', err));
                    
                    messageCorrig√©.authorId = authorIdCorrig√©;
                }
            }
            
            messagesCorrig√©s.push(messageCorrig√©);
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erreur enrichissement message:', error);
            // En cas d'erreur, garder le message original
            messagesCorrig√©s.push(message.toObject ? message.toObject() : message);
        }
    }
    
    return messagesCorrig√©s;
}

module.exports = {
    middlewareMessagesOrphelins,
    verifierEtCorrigerUtilisateur,
    enrichirMessagesAvecCorrection,
    UTILISATEUR_INTROUVABLE_ID,
    creerUtilisateurIntrouvableAuto
};
