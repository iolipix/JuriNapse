const User = require('../models/user.model');

/**
 * Middleware qui v√©rifie et met √† jour automatiquement le statut premium des utilisateurs
 * Doit √™tre utilis√© apr√®s authenticateToken pour avoir acc√®s √† req.user
 */
const checkPremiumExpiration = async (req, res, next) => {
  try {
    // Si pas d'utilisateur authentifi√©, continuer
    if (!req.user || !req.user.id) {
      return next();
    }

    // R√©cup√©rer l'utilisateur complet depuis la base de donn√©es
    const user = await User.findById(req.user.id);
    
    if (!user) {
      return next();
    }

    // V√©rifier si l'utilisateur a le premium et s'il a expir√©
    if (user.hasRole('premium') && user.premiumExpiresAt) {
      const now = new Date();
      
      if (user.premiumExpiresAt <= now) {
        // Premium expir√©, le retirer
        console.log(`üïí Premium expir√© pour l'utilisateur ${user.username} (${user._id})`);
        
        user.revokePremium();
        await user.save();
        
        // Mettre √† jour req.user pour cette requ√™te
        req.user = { ...req.user, ...user.toObject() };
      }
    }

    next();
  } catch (error) {
    console.error('Erreur lors de la v√©rification du premium:', error);
    // Continuer malgr√© l'erreur pour ne pas bloquer l'application
    next();
  }
};

/**
 * Middleware optionnel pour les routes qui n√©cessitent un premium valide
 */
const requireValidPremium = async (req, res, next) => {
  try {
    // V√©rifier d'abord l'expiration
    await checkPremiumExpiration(req, res, () => {});

    const user = await User.findById(req.user.id);
    
    if (!user || !user.isPremium()) {
      return res.status(403).json({
        success: false,
        message: 'Acc√®s premium requis',
        premiumExpired: user && user.hasRole('premium') && user.premiumExpiresAt && user.premiumExpiresAt <= new Date()
      });
    }

    next();
  } catch (error) {
    console.error('Erreur lors de la v√©rification du premium requis:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur interne du serveur'
    });
  }
};

module.exports = {
  checkPremiumExpiration,
  requireValidPremium
};