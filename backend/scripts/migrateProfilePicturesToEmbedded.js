#!/usr/bin/env node
/**
 * Migration inverse: recopier les photos depuis la collection ProfilePicture
 * vers user.profilePicture si ce champ est vide. Option --purge-collection
 * pour supprimer les documents apr√®s migration (apr√®s validation).
 */
const mongoose = require('mongoose');
require('dotenv').config({ path: process.env.ENV_PATH || '.env' });
const User = require('../models/user.model');
// Ancien mod√®le ProfilePicture supprim√©; variable conserv√©e uniquement pour √©viter les erreurs de r√©f√©rence dans le code comment√©.
// let ProfilePicture; // deprecated

(async () => {
  const purge = process.argv.includes('--purge-collection');
  try {
    const uri = process.env.MONGODB_URI || process.env.DATABASE_URL || process.env.MONGO_URL;
    if (!uri) throw new Error('Missing Mongo URI');
    await mongoose.connect(uri, { autoIndex: false });
    console.log('üîÑ Migration profile pictures -> embedded (User.profilePicture)');

  // Disabled: collection plus pr√©sente.
  // const cursor = ProfilePicture.find({}).select('userId imageData').cursor();
  // let updated = 0, skipped = 0;
  // for await (const doc of cursor) {
  //   const user = await User.findById(doc.userId).select('profilePicture');
  //   if (!user) continue;
  //   if (user.profilePicture && user.profilePicture.length > 20) {
  //     skipped++; // d√©j√† pr√©sent
  //     continue;
  //   }
  //   if (doc.imageData && doc.imageData.length > 20) {
  //     user.profilePicture = doc.imageData;
  //     try { await user.save(); updated++; } catch (e) { console.warn('‚ö†Ô∏è  Save fail user', doc.userId.toString(), e.message); }
  //   }
  // }

    console.log(`‚úÖ Migration termin√©e. Users mis √† jour: ${updated}. Skipped (d√©j√† ok): ${skipped}.`);
    if (purge) {
      const res = await ProfilePicture.deleteMany({});
      console.log(`üßπ Collection ProfilePicture purg√©e: ${res.deletedCount} docs supprim√©s.`);
    } else {
      console.log('‚ÑπÔ∏è  Utiliser --purge-collection apr√®s validation pour supprimer la collection.');
    }
    await mongoose.disconnect();
  } catch (e) {
    console.error('‚ùå Erreur migration inverse:', e);
    process.exit(1);
  }
})();
