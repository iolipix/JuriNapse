interface SEOSubmissionResponse {
  success: boolean;
  message: string;
}

/**
 * Service pour l'optimisation SEO et l'indexation des pages
 */
class SEOService {
  private static instance: SEOService;
  private readonly baseURL = 'https://jurinapse.com';

  private constructor() {}

  static getInstance(): SEOService {
    if (!SEOService.instance) {
      SEOService.instance = new SEOService();
    }
    return SEOService.instance;
  }

  /**
   * Soumettre une URL √† IndexNow (Bing, Yahoo)
   * Note: Cette fonction est d√©sactiv√©e c√¥t√© client pour √©viter CORS
   * L'indexation doit √™tre faite c√¥t√© serveur
   */
  async submitToIndexNow(url: string): Promise<SEOSubmissionResponse> {
    try {
      console.log(`üîç [CLIENT] Demande d'indexation pour: ${url}`);
      
      // En production, cet appel devrait √™tre fait via l'API backend
      // pour √©viter les probl√®mes CORS
      
      // Simuler le succ√®s c√¥t√© client
      console.log(`‚ÑπÔ∏è Indexation diff√©r√©e vers le backend pour: ${url}`);
      return { success: true, message: 'Demande d\'indexation enregistr√©e (√† traiter c√¥t√© serveur)' };
      
      // Code original d√©sactiv√© pour √©viter CORS:
      /*
      const indexNowUrl = 'https://api.indexnow.org/indexnow';
      const key = 'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6'; // Cl√© IndexNow (√† remplacer par la vraie)
      
      const response = await fetch(indexNowUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          host: 'jurinapse.com',
          key: key,
          keyLocation: `${this.baseURL}/indexnow-key.txt`,
          urlList: [url]
        })
      });

      if (response.ok) {
        console.log(`‚úÖ URL soumise √† IndexNow: ${url}`);
        return { success: true, message: 'URL soumise avec succ√®s √† IndexNow' };
      } else {
        console.warn(`‚ö†Ô∏è √âchec soumission IndexNow: ${response.status}`);
        return { success: false, message: `√âchec IndexNow: ${response.status}` };
      }
      */
    } catch (error) {
      console.error('‚ùå Erreur IndexNow:', error);
      return { success: false, message: 'Erreur lors de la soumission IndexNow' };
    }
  }

  /**
   * Ping Google pour notifier une nouvelle URL
   * Note: Cette fonction est d√©sactiv√©e c√¥t√© client pour √©viter CORS
   * Le ping Google doit √™tre fait c√¥t√© serveur
   */
  async pingGoogle(url: string): Promise<SEOSubmissionResponse> {
    try {
      console.log(`üîî [CLIENT] Demande de ping Google pour: ${url}`);
      
      // En production, cet appel devrait √™tre fait via l'API backend
      // car Google ping ne peut pas √™tre appel√© depuis le client (CORS)
      
      console.log(`‚ÑπÔ∏è Ping Google diff√©r√© vers le backend pour: ${url}`);
      return { success: true, message: 'Demande de ping Google enregistr√©e (√† traiter c√¥t√© serveur)' };
      
      // Code original d√©sactiv√© pour √©viter CORS:
      /*
      const pingUrl = `https://www.google.com/ping?sitemap=${this.baseURL}/sitemap.xml`;
      const response = await fetch(pingUrl, { method: 'GET' });
      console.log(`üîî Ping Google pour: ${url}`);
      return { success: true, message: 'Google notifi√© du nouveau contenu' };
      */
    } catch (error) {
      console.warn('‚ö†Ô∏è Ping Google impossible depuis le client:', error);
      return { success: false, message: 'Ping Google doit √™tre fait c√¥t√© serveur' };
    }
  }

  /**
   * Soumettre un profil utilisateur pour indexation
   * Utilise l'API backend pour √©viter les probl√®mes CORS
   */
  async submitUserProfile(username: string, fullName: string): Promise<SEOSubmissionResponse> {
    const profileUrl = `${this.baseURL}/profile/${username}`;
    
    console.log(`üîç [CLIENT] Demande d'indexation profil: ${fullName} (${profileUrl})`);
    
    try {
      // Utiliser l'API backend pour l'indexation r√©elle
      const response = await fetch('/api/seo/submit-profile', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username,
          fullName
        })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(`‚úÖ Profil soumis via backend: ${fullName}`);
        return result;
      } else {
        console.warn(`‚ö†Ô∏è √âchec soumission backend: ${response.status}`);
        // Continuer m√™me si l'indexation √©choue
        this.updatePageMeta(fullName, profileUrl);
        return { success: false, message: '√âchec indexation backend, SEO local appliqu√©' };
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Backend SEO indisponible, application SEO local uniquement:', error);
      
      // Appliquer au moins les optimisations locales
      this.updatePageMeta(fullName, profileUrl);
      
      return { 
        success: false, 
        message: 'Backend indisponible, optimisations locales appliqu√©es' 
      };
    }
  }

  /**
   * Mettre √† jour les meta tags de la page actuelle
   */
  private updatePageMeta(title: string, url: string): void {
    // Ajouter des meta tags suppl√©mentaires pour l'indexation
    const metaRobots = document.querySelector('meta[name="robots"]') || document.createElement('meta');
    metaRobots.setAttribute('name', 'robots');
    metaRobots.setAttribute('content', 'index, follow, max-image-preview:large');
    if (!document.head.contains(metaRobots)) {
      document.head.appendChild(metaRobots);
    }

    // Ajouter meta googlebot
    const metaGooglebot = document.querySelector('meta[name="googlebot"]') || document.createElement('meta');
    metaGooglebot.setAttribute('name', 'googlebot');
    metaGooglebot.setAttribute('content', 'index, follow, max-snippet:-1, max-image-preview:large');
    if (!document.head.contains(metaGooglebot)) {
      document.head.appendChild(metaGooglebot);
    }

    // Ajouter link canonical si pas d√©j√† pr√©sent
    let canonicalLink = document.querySelector('link[rel="canonical"]');
    if (!canonicalLink) {
      canonicalLink = document.createElement('link');
      canonicalLink.setAttribute('rel', 'canonical');
      canonicalLink.setAttribute('href', url);
      document.head.appendChild(canonicalLink);
    }
  }

  /**
   * G√©n√©rer et soumettre un sitemap dynamique avec les nouveaux profils
   */
  async updateSitemap(userProfiles: Array<{username: string, lastModified: string}>): Promise<SEOSubmissionResponse> {
    const sitemapEntries = userProfiles.map(profile => `
  <url>
    <loc>${this.baseURL}/profile/${profile.username}</loc>
    <lastmod>${profile.lastModified}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>`).join('');

    console.log(`üìÑ Sitemap mis √† jour avec ${userProfiles.length} profils`);
    
    // Note: En production, ceci devrait √™tre fait c√¥t√© serveur
    // pour mettre √† jour le fichier sitemap.xml r√©el
    
    return { success: true, message: `Sitemap mis √† jour avec ${userProfiles.length} profils` };
  }
}

export default SEOService.getInstance();
