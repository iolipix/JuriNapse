import React, { useState, useRef, useEffect } from 'react';
import { FileText, TrendingUp, LogIn, Bell, Menu, LogOut, Settings, FileCheck, BookOpen, Users, Scroll } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';
import { useNotifications } from '../../contexts/NotificationContext';

interface SidebarProps {
  activeTab: string;
  onTabChange: (tab: string) => void;
  onLogin: () => void;
}

const Sidebar: React.FC<SidebarProps> = ({ activeTab, onTabChange, onLogin }) => {
  const { user, logout } = useAuth();
  
  // Utilisation sécurisée du contexte des notifications
  let unreadCount = 0;
  try {
    const notificationContext = useNotifications();
    unreadCount = notificationContext?.unreadCount || 0;
  } catch (error) {
    // Le contexte n'est pas disponible, on utilise 0 par défaut  }
  
  const [isBurgerMenuOpen, setIsBurgerMenuOpen] = useState(false);
  const menuRef = useRef<HTMLDivElement>(null);

  // Fermer le menu burger quand on clique ailleurs
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setIsBurgerMenuOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const publicMenuItems = [
    { id: 'fiches', label: 'Fiches d\'arrêt', icon: FileText },
    { id: 'publications', label: 'Publications', icon: Users },
    { id: 'cours', label: 'Cours', icon: BookOpen },
    { id: 'protocole', label: 'Protocole', icon: Scroll },
    { id: 'trending', label: 'Tendances', icon: TrendingUp },
  ];

  const userMenuItems = [
    { id: 'notifications', label: 'Notifications', icon: Bell, requiresAuth: true },
  ];

  const handleTabClick = (tabId: string, requiresAuth: boolean = false) => {
    if (!user && requiresAuth) {
      onLogin();
      return;
    }
    onTabChange(tabId);
  };

  const handleLogout = () => {
    logout();
    setIsBurgerMenuOpen(false);
  };

  const handleSettings = () => {
    onTabChange('settings');
    setIsBurgerMenuOpen(false);
  };

  const handleTerms = () => {
    // TODO: Implémenter la page des conditions
    alert('Conditions d\'utilisation - À implémenter');
    setIsBurgerMenuOpen(false);
  };

  // Formater le nombre de notifications
  const formatNotificationCount = (count: number | undefined | null): string => {
    if (!count || count === 0) return '';
    if (count > 9) return '9+';
    return count.toString();
  };

  return (
    <aside className="w-64 bg-white shadow-sm border-r border-gray-200 h-[calc(100vh-4rem)] sticky top-16 flex flex-col">
      {/* Zone de navigation scrollable */}
      <div className="flex-1 overflow-y-auto p-4">
        <nav className="space-y-2">
          {/* Menu public */}
          {publicMenuItems.map((item) => {
            const Icon = item.icon;
            const isActive = activeTab === item.id;
            
            return (
              <button
                key={item.id}
                onClick={() => handleTabClick(item.id)}
                className={`w-full flex items-center justify-between px-3 py-2 rounded-lg text-left transition-all duration-200 ${
                  isActive
                    ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700'
                    : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                }`}
              >
                <div className="flex items-center space-x-3">
                  <Icon className={`h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />
                  <span className="font-medium">{item.label}</span>
                </div>
              </button>
            );
          })}

          {/* Menu utilisateur connecté */}
          {user ? (
            <>
              {userMenuItems.map((item) => {
                const Icon = item.icon;
                const isActive = activeTab === item.id;
                const isNotificationTab = item.id === 'notifications';
                const notificationCount = isNotificationTab ? formatNotificationCount(unreadCount) : '';
                
                return (
                  <button
                    key={item.id}
                    onClick={() => handleTabClick(item.id, item.requiresAuth)}
                    className={`w-full flex items-center justify-between px-3 py-2 rounded-lg text-left transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700'
                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                    }`}
                  >
                    <div className="flex items-center space-x-3">
                      <Icon className={`h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />
                      <span className="font-medium">{item.label}</span>
                    </div>
                    {/* Indicateur de notifications non lues */}
                    {isNotificationTab && notificationCount && (
                      <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full min-w-[1.5rem] h-6 flex items-center justify-center font-semibold">
                        {notificationCount}
                      </span>
                    )}
                  </button>
                );
              })}
            </>
          ) : (
            <>
              <button
                onClick={onLogin}
                className="w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-all duration-200 text-blue-600 hover:bg-blue-50"
              >
                <LogIn className="h-5 w-5 text-blue-600" />
                <span className="font-medium">Se connecter</span>
              </button>
              <div className="mt-3 p-3 bg-blue-50 rounded-lg">
                <p className="text-sm text-blue-800 font-medium mb-1">Rejoignez la communauté !</p>
                <p className="text-xs text-blue-600">
                  Connectez-vous pour publier, sauvegarder et accéder aux notifications.
                </p>
              </div>
            </>
          )}
        </nav>
      </div>

      {/* Menu Burger fixe en bas - TOUJOURS VISIBLE */}
      <div className="flex-shrink-0 p-4 border-t border-gray-200 bg-white relative" ref={menuRef}>
        <button
          onClick={() => setIsBurgerMenuOpen(!isBurgerMenuOpen)}
          className="w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-all duration-200 text-gray-600 hover:bg-gray-50 hover:text-gray-900"
        >
          <Menu className="h-5 w-5 text-gray-400" />
          <span className="font-medium">Menu</span>
        </button>

        {/* Dropdown Menu - S'ouvre vers le haut */}
        {isBurgerMenuOpen && (
          <div className="absolute bottom-full left-4 right-4 mb-2 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
            {/* Paramètres - Toujours visible */}
            <button
              onClick={handleSettings}
              className="w-full flex items-center space-x-3 px-4 py-2 text-left text-gray-700 hover:bg-gray-50 transition-colors"
            >
              <Settings className="h-4 w-4 text-gray-400" />
              <span>Paramètres</span>
            </button>
            
            {/* Conditions d'utilisation - Toujours visible */}
            <button
              onClick={handleTerms}
              className="w-full flex items-center space-x-3 px-4 py-2 text-left text-gray-700 hover:bg-gray-50 transition-colors"
            >
              <FileCheck className="h-4 w-4 text-gray-400" />
              <span>Conditions d'utilisation</span>
            </button>
            
            {/* Se déconnecter - Seulement si connecté */}
            {user && (
              <>
                <div className="border-t border-gray-200 my-1"></div>
                <button
                  onClick={handleLogout}
                  className="w-full flex items-center space-x-3 px-4 py-2 text-left text-red-600 hover:bg-red-50 transition-colors"
                >
                  <LogOut className="h-4 w-4" />
                  <span>Se déconnecter</span>
                </button>
              </>
            )}
          </div>
        )}
      </div>
    </aside>
  );
};

export default Sidebar;