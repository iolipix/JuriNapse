#!/usr/bin/env node

/**
 * Script de diagnostic pour l'upload de photo de groupe
 * Usage: nod  if (contextContent.includes('updateGroupPicture: async (groupId: string, pictureData:')) {
    console.log('   ‚úÖ Signature updateGroupPicture trouv√©e dans le contexte');
  } else if (contextContent.includes('updateGroupPicture = async (groupId: string, pictureData:')) {
    console.log('   ‚úÖ Signature updateGroupPicture trouv√©e dans le contexte (format alternatif)');
  } else {
    console.log('   ‚ùå Signature updateGroupPicture incorrecte dans le contexte');
  }gnose-group-picture.js
 */

console.log('üîç Diagnostic de l\'upload de photo de groupe\n');

// 1. V√©rifier l'API backend
console.log('1. V√©rification de l\'API backend...');
try {
  const groupController = require('./backend/controllers/group.controller.js');
  console.log('   ‚úÖ Contr√¥leur de groupe trouv√©');
  
  if (typeof groupController.updateGroupPicture === 'function') {
    console.log('   ‚úÖ Fonction updateGroupPicture existe');
  } else {
    console.log('   ‚ùå Fonction updateGroupPicture manquante');
  }
} catch (error) {
  console.log('   ‚ùå Erreur contr√¥leur:', error.message);
}

// 2. V√©rifier la route backend
console.log('\n2. V√©rification de la route backend...');
try {
  const routes = require('./backend/routes/group.routes.js');
  console.log('   ‚úÖ Routes de groupe trouv√©es');
} catch (error) {
  console.log('   ‚ùå Erreur routes:', error.message);
}

// 3. V√©rifier l'ImageOptimizer
console.log('\n3. V√©rification de l\'ImageOptimizer...');
try {
  const ImageOptimizer = require('./backend/utils/imageOptimizer.js');
  console.log('   ‚úÖ ImageOptimizer trouv√©');
  
  if (typeof ImageOptimizer.optimizeBase64Image === 'function') {
    console.log('   ‚úÖ Fonction optimizeBase64Image existe');
  } else {
    console.log('   ‚ùå Fonction optimizeBase64Image manquante');
  }
} catch (error) {
  console.log('   ‚ùå Erreur ImageOptimizer:', error.message);
}

// 4. V√©rifier le mod√®le Group
console.log('\n4. V√©rification du mod√®le Group...');
try {
  const Group = require('./backend/models/group.model.js');
  console.log('   ‚úÖ Mod√®le Group trouv√©');
  
  // Cr√©er une instance temporaire pour v√©rifier les champs
  const testGroup = new Group({
    name: 'Test',
    description: 'Test',
    adminId: '507f1f77bcf86cd799439011'
  });
  
  if ('profilePicture' in testGroup.toObject()) {
    console.log('   ‚úÖ Champ profilePicture existe dans le mod√®le');
  } else {
    console.log('   ‚ùå Champ profilePicture manquant dans le mod√®le');
  }
  
} catch (error) {
  console.log('   ‚ùå Erreur mod√®le Group:', error.message);
}

// 5. V√©rifier l'API frontend
console.log('\n5. V√©rification de l\'API frontend...');
try {
  const fs = require('fs');
  const apiContent = fs.readFileSync('./frontend/src/services/api.ts', 'utf8');
  
  if (apiContent.includes('updateGroupPicture')) {
    console.log('   ‚úÖ Fonction updateGroupPicture trouv√©e dans api.ts');
  } else {
    console.log('   ‚ùå Fonction updateGroupPicture manquante dans api.ts');
  }
  
  if (apiContent.includes('groupsAPI')) {
    console.log('   ‚úÖ Export groupsAPI trouv√©');
  } else {
    console.log('   ‚ùå Export groupsAPI manquant');
  }
  
} catch (error) {
  console.log('   ‚ùå Erreur lecture API frontend:', error.message);
}

// 6. V√©rifier le contexte de messagerie
console.log('\n6. V√©rification du contexte de messagerie...');
try {
  const fs = require('fs');
  const contextContent = fs.readFileSync('./frontend/src/contexts/MessagingContext.tsx', 'utf8');
  
  if (contextContent.includes('updateGroupPicture: (groupId: string, pictureData:')) {
    console.log('   ‚úÖ Signature updateGroupPicture trouv√©e dans le contexte');
  } else {
    console.log('   ‚ùå Signature updateGroupPicture incorrecte dans le contexte');
  }
  
  if (contextContent.includes('groupsAPI.updateGroupPicture')) {
    console.log('   ‚úÖ Appel API trouv√© dans le contexte');
  } else {
    console.log('   ‚ùå Appel API manquant dans le contexte');
  }
  
} catch (error) {
  console.log('   ‚ùå Erreur lecture contexte:', error.message);
}

console.log('\nüìã R√©sum√© du diagnostic:');
console.log('   - V√©rifiez que le serveur backend d√©marre sans erreur');
console.log('   - Testez l\'upload via l\'interface utilisateur');
console.log('   - Regardez les logs de la console du navigateur');
console.log('   - V√©rifiez les requ√™tes r√©seau dans les outils de d√©veloppement');

console.log('\nüöÄ Diagnostic termin√© !');
