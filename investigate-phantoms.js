const axios = require('axios');

async function investigatePhantomPosts() {
    try {
        console.log('üëª INVESTIGATION POSTS FANT√îMES\n');
        
        const baseURL = 'https://jurinapse-production.up.railway.app/api';
        
        // Test 1: Cr√©er un "instantan√©" de tous les posts actuels
        console.log('üì∏ INSTANTAN√â ACTUEL:');
        const currentPosts = await axios.get(`${baseURL}/posts`);
        console.log(`Posts actuellement visibles: ${currentPosts.data.posts.length}`);
        
        currentPosts.data.posts.forEach((post, i) => {
            console.log(`  ${i+1}. "${post.title}" par ${post.authorId?.username}`);
            console.log(`      ID: ${post._id}`);
            console.log(`      Cr√©√©: ${new Date(post.createdAt).toLocaleDateString()}`);
        });
        
        // Test 2: Forcer plusieurs requ√™tes avec des timestamps diff√©rents
        console.log('\n‚è∞ TEST COH√âRENCE TEMPORELLE:');
        const timestamps = [];
        
        for (let i = 0; i < 10; i++) {
            const response = await axios.get(`${baseURL}/posts?_bust=${Date.now()}`);
            timestamps.push({
                time: new Date().toISOString(),
                count: response.data.posts.length,
                titles: response.data.posts.map(p => p.title).join(', ')
            });
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        console.log('R√©sultats sur 10 requ√™tes:');
        timestamps.forEach((t, i) => {
            console.log(`${i+1}. ${t.count} posts - "${t.titles}" √† ${t.time.split('T')[1]}`);
        });
        
        // V√©rifier s'il y a des variations
        const counts = timestamps.map(t => t.count);
        const titles = timestamps.map(t => t.titles);
        const uniqueCounts = [...new Set(counts)];
        const uniqueTitles = [...new Set(titles)];
        
        if (uniqueCounts.length > 1) {
            console.log(`‚ö†Ô∏è INSTABILIT√â: ${uniqueCounts.join(', ')} posts diff√©rents d√©tect√©s`);
        }
        if (uniqueTitles.length > 1) {
            console.log('‚ö†Ô∏è POSTS VARIABLES d√©tect√©s:');
            uniqueTitles.forEach((title, i) => console.log(`  Variant ${i+1}: "${title}"`));
        }
        if (uniqueCounts.length === 1 && uniqueTitles.length === 1) {
            console.log('‚úÖ Stabilit√© parfaite c√¥t√© serveur');
        }
        
        // Test 3: V√©rifier le cache c√¥t√© client avec diff√©rentes strat√©gies
        console.log('\nüåê TEST STRAT√âGIES ANTI-CACHE:');
        
        const strategies = [
            { name: 'Normal', headers: {} },
            { name: 'No-Cache', headers: { 'Cache-Control': 'no-cache' } },
            { name: 'No-Store', headers: { 'Cache-Control': 'no-store' } },
            { name: 'Must-Revalidate', headers: { 'Cache-Control': 'must-revalidate' } },
            { name: 'Max-Age-0', headers: { 'Cache-Control': 'max-age=0' } }
        ];
        
        for (const strategy of strategies) {
            try {
                const response = await axios.get(`${baseURL}/posts`, { headers: strategy.headers });
                console.log(`${strategy.name}: ${response.data.posts.length} posts`);
            } catch (e) {
                console.log(`${strategy.name}: ERREUR`);
            }
        }
        
        // Test 4: Identifier les posts supprim√©s r√©cemment
        console.log('\nüóëÔ∏è ANALYSE SUPPRESSIONS R√âCENTES:');
        console.log('Posts que tu as peut-√™tre supprim√©s r√©cemment:');
        console.log('- "dd" (disparu du serveur)');
        console.log('- "ss" (disparu du serveur)');  
        console.log('- "ddd" (disparu du serveur)');
        console.log('- "sdfg" (disparu du serveur)');
        
        console.log('\nüîç Ces posts apparaissent-ils temporairement dans ton navigateur ?');
        
        console.log('\nüí° DIAGNOSTIC:');
        console.log('Si tu vois des posts qui n\'existent plus c√¥t√© serveur:');
        console.log('1. üß† React State: L\'√©tat local garde les anciens posts');
        console.log('2. üåê Service Worker: Cache les anciennes r√©ponses');
        console.log('3. üç™ Local Storage: Stocke les anciens posts');
        console.log('4. üì± App Cache: Cache application obsol√®te');
        
        console.log('\nüõ†Ô∏è SOLUTIONS IMM√âDIATES:');
        console.log('1. Ctrl+Shift+Del > Tout supprimer');
        console.log('2. F12 > Application > Storage > Clear All');
        console.log('3. F12 > Application > Service Workers > Unregister');
        console.log('4. Teste en navigation priv√©e');
        console.log('5. D√©sactive/r√©active WiFi pour forcer refresh');
        
        console.log('\nüîß SI PROBL√àME PERSISTE:');
        console.log('Le frontend React a probablement un bug de state management');
        console.log('Il faut regarder le code React qui g√®re la suppression');
        
    } catch (error) {
        console.error('‚ùå Erreur investigation:', error.response?.data || error.message);
    }
}

console.log('üöÄ Investigation posts fant√¥mes...\n');

investigatePhantomPosts();
