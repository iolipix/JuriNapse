const mongoose = require('mongoose');
require('dotenv').config({ path: './config/.env' });

console.log('üîç Diagnostic de connexion MongoDB');
console.log('üìã Configuration actuelle:');
console.log('   - MONGODB_URI:', process.env.MONGODB_URI ? 'D√©finie' : 'Non d√©finie');
console.log('   - DB_USER:', process.env.DB_USER);
console.log('   - DB_PASSWORD:', process.env.DB_PASSWORD ? 'D√©fini (masqu√©)' : 'Non d√©fini');
console.log('   - DB_CLUSTER:', process.env.DB_CLUSTER);

async function testConnection() {
  try {
    console.log('\nüîÑ Tentative de connexion...');
    
    const mongoUri = process.env.MONGODB_URI;
    console.log('   URI utilis√©e:', mongoUri.replace(/\/\/([^:]+):([^@]+)@/, '//***:***@'));
    
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connexion MongoDB r√©ussie !');
    
    // Tester une requ√™te simple
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('üìä Collections trouv√©es:', collections.length);
    
    await mongoose.disconnect();
    console.log('üîå D√©connexion r√©ussie');
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message);
    
    if (error.message.includes('Authentication failed')) {
      console.log('\nüîß Solutions possibles:');
      console.log('   1. V√©rifier le nom d\'utilisateur et mot de passe');
      console.log('   2. V√©rifier que l\'utilisateur existe dans MongoDB Atlas');
      console.log('   3. V√©rifier les permissions de l\'utilisateur');
      console.log('   4. V√©rifier que l\'IP est autoris√©e (whitelist)');
    }
    
    if (error.message.includes('network')) {
      console.log('\nüåê Probl√®me r√©seau d√©tect√©:');
      console.log('   1. V√©rifier la connexion internet');
      console.log('   2. V√©rifier que MongoDB Atlas est accessible');
    }
  }
}

testConnection();
