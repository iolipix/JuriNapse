const mongoose = require('mongoose');
require('dotenv').config({ path: './backend/.env' });

async function forceCleanupOrphanedMessages() {
  try {
    console.log('üîå Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // Acc√®s direct aux collections
    const messagesCollection = mongoose.connection.db.collection('messages');
    const postsCollection = mongoose.connection.db.collection('posts');

    console.log('üîç Recherche des messages avec sharedPost...');
    
    // Trouver tous les messages qui ont un sharedPost
    const messagesWithSharedPost = await messagesCollection.find({
      'sharedPost._id': { $exists: true, $ne: null }
    }).toArray();

    console.log(`üìä ${messagesWithSharedPost.length} messages avec sharedPost trouv√©s`);

    if (messagesWithSharedPost.length === 0) {
      console.log('‚úÖ Aucun message avec sharedPost trouv√©');
      return;
    }

    // R√©cup√©rer tous les IDs des posts r√©f√©renc√©s
    const referencedPostIds = messagesWithSharedPost.map(msg => {
      // G√©rer diff√©rents formats possibles de l'ID
      const postId = msg.sharedPost._id;
      if (typeof postId === 'string') {
        return new mongoose.Types.ObjectId(postId);
      } else if (postId instanceof mongoose.Types.ObjectId) {
        return postId;
      }
      return null;
    }).filter(id => id !== null);

    console.log(`üîç V√©rification de ${referencedPostIds.length} posts r√©f√©renc√©s...`);

    // V√©rifier quels posts existent encore
    const existingPosts = await postsCollection.find({
      _id: { $in: referencedPostIds }
    }, { projection: { _id: 1 } }).toArray();

    const existingPostIdsStr = existingPosts.map(post => post._id.toString());
    console.log(`‚úÖ ${existingPostIdsStr.length} posts existent encore`);

    // Identifier les messages orphelins
    const orphanedMessages = messagesWithSharedPost.filter(msg => {
      const postIdStr = msg.sharedPost._id.toString();
      return !existingPostIdsStr.includes(postIdStr);
    });

    console.log(`üö® ${orphanedMessages.length} messages orphelins d√©tect√©s`);

    if (orphanedMessages.length === 0) {
      console.log('‚úÖ Aucun message orphelin trouv√©');
      return;
    }

    // Afficher quelques d√©tails
    console.log('üìã Premiers messages orphelins:');
    orphanedMessages.slice(0, 5).forEach((msg, index) => {
      console.log(`   ${index + 1}. Message: ${msg._id}, Post inexistant: ${msg.sharedPost._id}, Groupe: ${msg.groupId || 'N/A'}`);
    });

    console.log(`\nüóëÔ∏è SUPPRESSION FORC√âE de ${orphanedMessages.length} messages orphelins...`);

    // Supprimer les messages orphelins
    const orphanedMessageIds = orphanedMessages.map(msg => msg._id);
    const deleteResult = await messagesCollection.deleteMany({
      _id: { $in: orphanedMessageIds }
    });

    console.log(`‚úÖ ${deleteResult.deletedCount} messages orphelins supprim√©s`);
    console.log('üéâ Nettoyage termin√© avec succ√®s');

    // V√©rification finale
    const remainingOrphans = await messagesCollection.find({
      'sharedPost._id': { $exists: true, $ne: null }
    }).toArray();

    const stillOrphaned = [];
    for (const msg of remainingOrphans) {
      const postExists = await postsCollection.findOne({ _id: msg.sharedPost._id });
      if (!postExists) {
        stillOrphaned.push(msg);
      }
    }

    if (stillOrphaned.length > 0) {
      console.log(`‚ö†Ô∏è Il reste ${stillOrphaned.length} messages orphelins`);
    } else {
      console.log('‚úÖ Plus aucun message orphelin d√©tect√©');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üìù Connexion MongoDB ferm√©e');
    process.exit(0);
  }
}

forceCleanupOrphanedMessages();
