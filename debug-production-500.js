const axios = require('axios');

async function deepTestProductionAPI() {
    console.log('üîç DIAGNOSTIC APPROFONDI API PRODUCTION');
    console.log('=======================================');
    
    const baseURL = 'https://jurinapse-production.up.railway.app';
    const groupId = '6877ada30f934e0b470cf524';
    
    try {
        // Test 1: Sans param√®tres pour voir la r√©ponse
        console.log('1Ô∏è‚É£ Test API sans param√®tres...');
        const response1 = await axios.get(`${baseURL}/api/messages/group/${groupId}`, {
            timeout: 15000,
            validateStatus: () => true
        });
        
        console.log(`   Status: ${response1.status}`);
        console.log(`   Headers: ${JSON.stringify(response1.headers)}`);
        console.log(`   Response: ${JSON.stringify(response1.data, null, 2)}`);
        
        // Test 2: Avec param√®tres exactement comme le client
        console.log('\n2Ô∏è‚É£ Test avec param√®tres page=1&limit=20...');
        const response2 = await axios.get(`${baseURL}/api/messages/group/${groupId}`, {
            params: { page: 1, limit: 20 },
            timeout: 15000,
            validateStatus: () => true
        });
        
        console.log(`   Status: ${response2.status}`);
        console.log(`   Response: ${JSON.stringify(response2.data, null, 2)}`);
        
        // Test 3: V√©rifier les autres endpoints
        console.log('\n3Ô∏è‚É£ Test endpoint de base...');
        const response3 = await axios.get(`${baseURL}/api/health`, {
            timeout: 10000,
            validateStatus: () => true
        });
        
        console.log(`   Health Status: ${response3.status}`);
        
        // Test 4: V√©rifier si le serveur red√©marre constamment
        console.log('\n4Ô∏è‚É£ Test de stabilit√© (3 requ√™tes rapides)...');
        for (let i = 1; i <= 3; i++) {
            try {
                const quickTest = await axios.get(`${baseURL}/api/messages/group/${groupId}`, {
                    params: { page: 1, limit: 1 },
                    timeout: 5000,
                    validateStatus: () => true
                });
                console.log(`   Test ${i}: ${quickTest.status}`);
            } catch (error) {
                console.log(`   Test ${i}: ERROR - ${error.message}`);
            }
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors du diagnostic:', error.message);
        
        if (error.code === 'ECONNABORTED') {
            console.log('üí° Le serveur prend trop de temps √† r√©pondre');
        } else if (error.code === 'ECONNREFUSED') {
            console.log('üí° Le serveur refuse les connexions');
        }
    }
}

// √âgalement tester si Railway a bien d√©ploy√© notre dernier commit
async function checkRailwayDeployment() {
    console.log('\nüöÇ V√âRIFICATION DU D√âPLOIEMENT RAILWAY');
    console.log('=====================================');
    
    try {
        // Faire plusieurs tests pour voir si c'est consistant
        const tests = [];
        for (let i = 0; i < 5; i++) {
            tests.push(
                axios.get('https://jurinapse-production.up.railway.app/api/messages/group/6877ada30f934e0b470cf524', {
                    params: { page: 1, limit: 1 },
                    timeout: 8000,
                    validateStatus: () => true
                }).then(response => response.status).catch(error => error.code)
            );
        }
        
        const results = await Promise.all(tests);
        console.log('üìä R√©sultats des 5 tests rapides:', results);
        
        const errors500 = results.filter(r => r === 500).length;
        const errors401 = results.filter(r => r === 401).length;
        const errors = results.filter(r => typeof r === 'string').length;
        
        console.log(`   ‚Ä¢ Erreurs 500: ${errors500}/5`);
        console.log(`   ‚Ä¢ Erreurs 401: ${errors401}/5`);
        console.log(`   ‚Ä¢ Erreurs r√©seau: ${errors}/5`);
        
        if (errors500 > 0) {
            console.log('\n‚ùå CONFIRMATION: Erreur 500 persiste en production');
            console.log('üí° Railway n\'a pas correctement d√©ploy√© nos corrections');
            console.log('üîß Solutions possibles:');
            console.log('   1. Forcer un red√©ploiement Railway');
            console.log('   2. V√©rifier les logs Railway pour voir les erreurs');
            console.log('   3. Le probl√®me peut venir d\'une d√©pendance ou d\'une variable d\'environnement');
        } else if (errors401 > 0) {
            console.log('\n‚úÖ Railway semble avoir d√©ploy√© (erreurs 401 = normal sans auth)');
            console.log('üí° Mais votre navigateur voit encore du 500 - probl√®me de cache ou autre');
        }
        
    } catch (error) {
        console.log('‚ùå Erreur pendant les tests:', error.message);
    }
}

async function main() {
    await deepTestProductionAPI();
    await checkRailwayDeployment();
    
    console.log('\nüéØ RECOMMANDATIONS FINALES:');
    console.log('1. Si les tests montrent du 500 : Railway n\'a pas d√©ploy√© correctement');
    console.log('2. Si les tests montrent du 401 : Probl√®me c√¥t√© navigateur/cache');
    console.log('3. V√©rifier Railway Dashboard : https://railway.app');
    console.log('4. Forcer un red√©ploiement manuel si n√©cessaire');
}

main();
