/**
 * Script de diagnostic complet pour les webhooks Stripe
 */

const User = require('./backend/models/user.model');
const mongoose = require('mongoose');
require('dotenv').config({ path: './backend/config/.env' });

async function diagnosticWebhookProblem() {
  try {
    console.log('üîç DIAGNOSTIC COMPLET DES WEBHOOKS STRIPE\n');
    
    // 1. V√©rifier la configuration Stripe
    const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
    
    console.log('üìã 1. V√âRIFICATION CONFIGURATION STRIPE');
    console.log(`Secret Key: ${process.env.STRIPE_SECRET_KEY?.substring(0, 12)}...`);
    console.log(`Webhook Secret: ${process.env.STRIPE_WEBHOOK_SECRET ? 'D√©fini' : 'NON D√âFINI ‚ùå'}`);
    console.log(`Premium Lookup Key: ${process.env.STRIPE_PREMIUM_LOOKUP_KEY || 'NON D√âFINI ‚ùå'}\n`);
    
    // 2. Lister les webhooks configur√©s
    console.log('üì° 2. WEBHOOKS CONFIGUR√âS DANS STRIPE');
    const webhooks = await stripe.webhookEndpoints.list();
    
    if (webhooks.data.length === 0) {
      console.log('‚ùå PROBL√àME MAJEUR: Aucun webhook configur√© dans Stripe !');
      console.log('üìù SOLUTION: Va dans Stripe Dashboard > Webhooks > Ajouter un endpoint');
      console.log('URL √† configurer: https://jurinapse.railway.app/api/stripe/webhook');
      console.log('√âv√©nements: checkout.session.completed, customer.subscription.created, customer.subscription.updated\n');
    } else {
      webhooks.data.forEach((webhook, index) => {
        console.log(`${index + 1}. URL: ${webhook.url}`);
        console.log(`   Statut: ${webhook.status}`);
        console.log(`   √âv√©nements: ${webhook.enabled_events.join(', ')}`);
        
        // V√©rifier si l'URL est correcte
        if (!webhook.url.includes('jurinapse.railway.app')) {
          console.log('   ‚ö†Ô∏è  URL suspecte - devrait pointer vers jurinapse.railway.app');
        }
        if (!webhook.url.includes('/api/stripe/webhook')) {
          console.log('   ‚ö†Ô∏è  URL incorrecte - devrait finir par /api/stripe/webhook');
        }
        console.log('');
      });
    }
    
    // 3. V√©rifier les abonnements r√©cents
    console.log('üí≥ 3. ABONNEMENTS R√âCENTS (derni√®res 24h)');
    const subscriptions = await stripe.subscriptions.list({
      limit: 10,
      created: { gte: Math.floor((Date.now() - 24*60*60*1000) / 1000) }
    });
    
    if (subscriptions.data.length === 0) {
      console.log('‚ùå Aucun abonnement cr√©√© dans les derni√®res 24h');
    } else {
      for (const sub of subscriptions.data) {
        console.log(`Abonnement: ${sub.id}`);
        console.log(`  Statut: ${sub.status}`);
        console.log(`  Customer: ${sub.customer}`);
        console.log(`  Metadata userId: ${sub.metadata?.userId || 'MANQUANT ‚ùå'}`);
        console.log(`  Cr√©√©: ${new Date(sub.created * 1000).toLocaleString()}`);
        
        // V√©rifier le customer associ√©
        try {
          const customer = await stripe.customers.retrieve(sub.customer);
          console.log(`  Email customer: ${customer.email}`);
        } catch (e) {
          console.log(`  ‚ùå Erreur r√©cup√©ration customer: ${e.message}`);
        }
        console.log('');
      }
    }
    
    // 4. Connecter √† MongoDB et v√©rifier utilisateurs
    console.log('üîå 4. CONNEXION MONGODB ET V√âRIFICATION UTILISATEURS');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');
    
    const theo = await User.findOne({
      $or: [
        { email: 'theophane.maurey@gmail.com' },
        { roles: /administrator/ }
      ]
    });
    
    if (!theo) {
      console.log('‚ùå Admin Th√©ophane non trouv√© dans la base');
    } else {
      console.log(`‚úÖ Admin trouv√©: ${theo.username}`);
      console.log(`üìß Email: ${theo.email}`);
      console.log(`üé≠ R√¥les: ${theo.roles}`);
      console.log(`üëë Premium: ${theo.isPremium ? 'OUI' : 'NON'}`);
      console.log(`üí≥ Stripe Customer: ${theo.stripeCustomerId || 'NON D√âFINI'}`);
      console.log(`üîë Stripe Subscription: ${theo.stripeSubscriptionId || 'NON D√âFINI'}`);
    }
    
    // 5. Solutions recommand√©es
    console.log('\nüîß 5. SOLUTIONS RECOMMAND√âES:');
    
    if (webhooks.data.length === 0) {
      console.log('PRIORIT√â 1: Configurer le webhook dans Stripe Dashboard');
      console.log('- URL: https://jurinapse.railway.app/api/stripe/webhook');
      console.log('- √âv√©nements: checkout.session.completed, customer.subscription.*');
    }
    
    if (!process.env.STRIPE_WEBHOOK_SECRET) {
      console.log('PRIORIT√â 2: D√©finir STRIPE_WEBHOOK_SECRET dans Railway');
    }
    
    if (theo && !theo.stripeCustomerId && subscriptions.data.length > 0) {
      console.log('PRIORIT√â 3: Lier le compte Th√©ophane aux abonnements Stripe');
    }
    
    console.log('\n‚úÖ Diagnostic termin√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
    }
    process.exit(0);
  }
}

diagnosticWebhookProblem();